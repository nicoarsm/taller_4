{"version":3,"file":"index.js","sources":["../src/MaterialPopover/MaterialPopoverContent.js","../src/MaterialPopover/MaterialPopoverTarget.js","../src/MaterialPopover/MaterialPopover.js","../src/MaterialDatatableFilter.js","../src/MaterialDatatableViewCol.js","../src/MaterialDatatableSearch.js","../src/styled.js","../src/MaterialDatatableToolbar.js","../src/MaterialDatatableToolbarSelect.js","../src/MaterialDatatableFilterList.js","../src/MaterialDatatableBodyCell.js","../src/MaterialDatatableBodyRow.js","../src/MaterialDatatableSelectCell.js","../src/MaterialDatatableBody.js","../src/MaterialDatatableResize.js","../src/MaterialDatatableHeadRow.js","../src/MaterialDatatableHeadCell.js","../src/MaterialDatatableHead.js","../src/MaterialDatatablePagination.js","../src/textLabels.js","../src/MaterialDatatable.js"],"sourcesContent":["import React from \"react\";\r\n\r\nclass MaterialPopoverContent extends React.Component {\r\n  render() {\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default MaterialPopoverContent;\r\n","import React from \"react\";\r\n\r\nclass MaterialPopoverTarget extends React.Component {\r\n  render() {\r\n    const targetContent = React.Children.map(this.props.children, (child, index) => {\r\n      return React.cloneElement(child, {\r\n        key: index,\r\n        ref: this.props.targetRef,\r\n        onClick: this.props.onClick,\r\n      });\r\n    });\r\n\r\n    return targetContent;\r\n  }\r\n}\r\n\r\nexport default MaterialPopoverTarget;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Popover from \"@material-ui/core/Popover\";\r\nimport MaterialPopoverContent from \"./MaterialPopoverContent\";\r\nimport MaterialPopoverTarget from \"./MaterialPopoverTarget\";\r\nimport { findDOMNode } from \"react-dom\";\r\n\r\nclass MaterialPopover extends React.Component {\r\n  static propTypes = {\r\n    /** Show indicating arrow. default: true */\r\n    arrow: PropTypes.bool,\r\n    /** Reference callback to handleRequestClose() to trigger manual close of MaterialPopover */\r\n    refClose: PropTypes.func,\r\n    /** Reference callback to onExited() to trigger manual close of MaterialPopover */\r\n    refExit: PropTypes.func,\r\n    /** MaterialPopoverTarget and MaterialPopoverContent are required children */\r\n    children: (props, propName, componentName) => {\r\n      let childMatch = true;\r\n      const expectedComponents = [MaterialPopoverContent, MaterialPopoverTarget];\r\n\r\n      React.Children.map(props.children, (child, index) => {\r\n        if (expectedComponents.indexOf(child.type) === -1) childMatch = false;\r\n      });\r\n\r\n      if (!childMatch) {\r\n        return new Error(\r\n          \"`\" +\r\n            componentName +\r\n            \"` \" +\r\n            \"should only have children of the following types: `MaterialPopoverTarget`, `MaterialPopoverContent`.\",\r\n        );\r\n      }\r\n    },\r\n  };\r\n\r\n  state = {\r\n    open: false,\r\n  };\r\n\r\n  componentWillMount() {\r\n    this.anchorEl = null;\r\n  }\r\n\r\n  componentDidMount() {\r\n    /*\r\n     * expose close method to the parent\r\n     */\r\n    if (this.props.refClose) {\r\n      this.props.refClose(this.handleRequestClose);\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    /*  \r\n     * Update Popover position if a filter removes data from the table because\r\n     * it affects the window height which would cause the Popover to in the wrong place\r\n     */\r\n    if (this.state.open === true) {\r\n      this.anchorEl = findDOMNode(this.anchorEl);\r\n      this.popoverActions.updatePosition();\r\n    }\r\n  }\r\n\r\n  handleClick = () => {\r\n    this.anchorEl = findDOMNode(this.anchorEl);\r\n    this.setState({ open: true });\r\n  };\r\n\r\n  handleRequestClose = cb => {\r\n    this.setState({ open: false }, cb && typeof cb === \"function\" ? cb() : () => {});\r\n  };\r\n\r\n  handleOnExit = () => {\r\n    if (this.props.refExit) {\r\n      this.props.refExit();\r\n    }\r\n  };\r\n\r\n  render() {\r\n    let popoverRender = [];\r\n\r\n    const { className, placement, refClose, refExit, children, ...providedProps } = this.props;\r\n\r\n    React.Children.map(children, (child, index) => {\r\n      if (child.type === MaterialPopoverContent || child.type === <MaterialPopoverContent />.type) {\r\n        const transformOriginSpecs = {\r\n          vertical: \"top\",\r\n          horizontal: \"center\",\r\n        };\r\n\r\n        const anchorOriginSpecs = {\r\n          vertical: \"bottom\",\r\n          horizontal: \"center\",\r\n        };\r\n\r\n        const popoverContent = (\r\n          <Popover\r\n            action={actions => (this.popoverActions = actions)}\r\n            key={index}\r\n            elevation={2}\r\n            open={this.state.open}\r\n            onClose={this.handleRequestClose}\r\n            onExited={this.handleOnExit}\r\n            anchorEl={this.anchorEl}\r\n            ref={el => this.popoverEl}\r\n            anchorOrigin={anchorOriginSpecs}\r\n            transformOrigin={transformOriginSpecs}\r\n            {...providedProps}>\r\n            {child}\r\n          </Popover>\r\n        );\r\n\r\n        popoverRender.push(popoverContent);\r\n      } else if (child.type === MaterialPopoverTarget || child.type === <MaterialPopoverTarget />.type) {\r\n        const targetContent = React.cloneElement(child, {\r\n          key: index,\r\n          targetRef: el => (this.anchorEl = el),\r\n          onClick: this.handleClick,\r\n        });\r\n\r\n        popoverRender.push(targetContent);\r\n      }\r\n    });\r\n\r\n    return popoverRender;\r\n  }\r\n}\r\n\r\nexport default MaterialPopover;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport classNames from \"classnames\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport FormGroup from \"@material-ui/core/FormGroup\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Input from \"@material-ui/core/Input\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport {withStyles} from \"@material-ui/core/styles\";\r\n\r\nexport const defaultFilterStyles = {\r\n    root: {\r\n        padding: \"16px 24px 16px 24px\",\r\n        fontFamily: \"Roboto\",\r\n    },\r\n    header: {\r\n        flex: \"0 0 auto\",\r\n        marginBottom: \"16px\",\r\n        width: \"100%\",\r\n        display: \"flex\",\r\n        justifyContent: \"space-between\",\r\n    },\r\n    title: {\r\n        display: \"inline-block\",\r\n        marginLeft: \"7px\",\r\n        color: \"#424242\",\r\n        fontSize: \"14px\",\r\n        fontWeight: 500,\r\n    },\r\n    noMargin: {\r\n        marginLeft: \"0px\",\r\n    },\r\n    reset: {\r\n        alignSelf: \"left\",\r\n    },\r\n    resetLink: {\r\n        color: \"#027cb5\",\r\n        backgroundColor: \"#FFF\",\r\n        display: \"inline-block\",\r\n        marginLeft: \"24px\",\r\n        fontSize: \"12px\",\r\n        cursor: \"pointer\",\r\n        border: \"none\",\r\n        \"&:hover\": {\r\n            color: \"#FF0000\",\r\n        },\r\n    },\r\n    filtersSelected: {\r\n        alignSelf: \"right\",\r\n    },\r\n    /* checkbox */\r\n    checkboxList: {\r\n        flex: \"1 1 100%\",\r\n        display: \"inline-flex\",\r\n        marginRight: \"24px\",\r\n    },\r\n    checkboxListTitle: {\r\n        marginLeft: \"7px\",\r\n        marginBottom: \"8px\",\r\n        fontSize: \"14px\",\r\n        color: \"#424242\",\r\n        textAlign: \"left\",\r\n        fontWeight: 500,\r\n    },\r\n    checkboxFormGroup: {\r\n        marginTop: \"8px\",\r\n    },\r\n    checkboxFormControl: {\r\n        margin: \"0px\",\r\n    },\r\n    checkboxFormControlLabel: {\r\n        fontSize: \"15px\",\r\n        marginLeft: \"8px\",\r\n        color: \"#4a4a4a\",\r\n    },\r\n    checkboxIcon: {\r\n        //color: \"#027cb5\",\r\n        width: \"32px\",\r\n        height: \"32px\",\r\n    },\r\n    checkbox: {\r\n        \"&$checked\": {\r\n            color: \"#027cB5\",\r\n        },\r\n    },\r\n    checked: {},\r\n    /* selects */\r\n    selectRoot: {\r\n        display: \"flex\",\r\n        marginTop: \"16px\",\r\n        flexDirection: \"row\",\r\n        flexWrap: \"wrap\",\r\n        width: \"100%\",\r\n        height: \"80%\",\r\n        justifyContent: \"space-between\",\r\n    },\r\n    selectFormControl: {\r\n        flex: \"1 1 calc(50% - 24px)\",\r\n        marginRight: \"24px\",\r\n        marginBottom: \"24px\",\r\n    },\r\n};\r\n\r\nclass MaterialDatatableFilter extends React.Component {\r\n    static propTypes = {\r\n        /** Data used to populate filter dropdown/checkbox */\r\n        filterData: PropTypes.array.isRequired,\r\n        /** Data selected to be filtered against dropdown/checkbox */\r\n        filterList: PropTypes.array.isRequired,\r\n        /** Options used to describe table */\r\n        options: PropTypes.object.isRequired,\r\n        /** Callback to trigger filter update */\r\n        onFilterUpdate: PropTypes.func,\r\n        /** Callback to trigger filter reset */\r\n        onFilterRest: PropTypes.func,\r\n        /** Extend the style applied to components */\r\n        classes: PropTypes.object,\r\n    };\r\n\r\n    handleCheckboxChange = (index, column) => {\r\n        this.props.onFilterUpdate(index, column, \"checkbox\");\r\n    };\r\n\r\n    handleDropdownChange = (event, index) => {\r\n        const value = event.target.value === \"All\" ? \"\" : event.target.value;\r\n        this.props.onFilterUpdate(index, value, \"dropdown\");\r\n    };\r\n\r\n    handleMultiselectChange = (index, column) => {\r\n        this.props.onFilterUpdate(index, column, \"multiselect\");\r\n    };\r\n\r\n    renderCheckbox(columns) {\r\n        const {classes, filterData, filterList} = this.props;\r\n\r\n        return columns.map(\r\n            (column, index) =>\r\n                column.filter ? (\r\n                    <div className={classes.checkboxList} key={index}>\r\n                        <FormGroup>\r\n                            <Typography variant=\"caption\" className={classes.checkboxListTitle}>\r\n                                {column.name}\r\n                            </Typography>\r\n                            {filterData[index].map((filterColumn, filterIndex) => (\r\n                                <FormControlLabel\r\n                                    key={filterIndex}\r\n                                    classes={{\r\n                                        root: classes.checkboxFormControl,\r\n                                        label: classes.checkboxFormControlLabel,\r\n                                    }}\r\n                                    control={\r\n                                        <Checkbox\r\n                                            className={classes.checkboxIcon}\r\n                                            onChange={this.handleCheckboxChange.bind(null, index, filterColumn)}\r\n                                            checked={filterList[index].indexOf(filterColumn) >= 0 ? true : false}\r\n                                            classes={{\r\n                                                root: classes.checkbox,\r\n                                                checked: classes.checked,\r\n                                            }}\r\n                                            value={filterColumn !== null ? filterColumn.toString() : \"\"}\r\n                                        />\r\n                                    }\r\n                                    label={filterColumn}\r\n                                />\r\n                            ))}\r\n                        </FormGroup>\r\n                    </div>\r\n                ) : (\r\n                    false\r\n                ),\r\n        );\r\n    }\r\n\r\n    renderSelect(columns) {\r\n        const {classes, filterData, filterList, options} = this.props;\r\n        const textLabels = options.textLabels.filter;\r\n\r\n        return (\r\n            <div className={classes.selectRoot}>\r\n                {columns.map(\r\n                    (column, index) =>\r\n                        column.filter ? (\r\n                            <FormControl className={classes.selectFormControl} key={index}>\r\n                                <InputLabel htmlFor={column.name}>{column.name}</InputLabel>\r\n                                <Select\r\n                                    value={filterList[index].toString() || textLabels.all}\r\n                                    name={column.name}\r\n                                    onChange={event => this.handleDropdownChange(event, index)}\r\n                                    input={<Input name={column.name} id={column.name}/>}>\r\n                                    <MenuItem value={textLabels.all} key={0}>\r\n                                        {textLabels.all}\r\n                                    </MenuItem>\r\n                                    {filterData[index].map((filterColumn, filterIndex) => (\r\n                                        <MenuItem value={filterColumn} key={filterIndex + 1}>\r\n                                            {filterColumn !== null ? filterColumn.toString() : \"\"}\r\n                                        </MenuItem>\r\n                                    ))}\r\n                                </Select>\r\n                            </FormControl>\r\n                        ) : (\r\n                            false\r\n                        ),\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderMultiselect(columns) {\r\n        const {classes, filterData, filterList, options} = this.props;\r\n\r\n        return (\r\n            <div className={classes.selectRoot}>\r\n                {columns.map(\r\n                    (column, index) =>\r\n                        column.filter ? (\r\n                            <FormControl className={classes.selectFormControl} key={index}>\r\n                                <InputLabel htmlFor={column.name}>{column.name}</InputLabel>\r\n                                <Select\r\n                                    multiple\r\n                                    value={filterList[index] || []}\r\n                                    renderValue={selected => selected.join(\", \")}\r\n                                    name={column.name}\r\n                                    onChange={event => this.handleMultiselectChange(index, event.target.value)}\r\n                                    input={<Input name={column.name} id={column.name}/>}>\r\n                                    {filterData[index].map((filterColumn, filterIndex) => (\r\n                                        <MenuItem value={filterColumn} key={filterIndex + 1}>\r\n                                            <Checkbox\r\n                                                checked={filterList[index].indexOf(filterColumn) >= 0 ? true : false}\r\n                                                value={filterColumn.toString()}\r\n                                                className={classes.checkboxIcon}\r\n                                                classes={{\r\n                                                    root: classes.checkbox,\r\n                                                    checked: classes.checked,\r\n                                                }}\r\n                                            />\r\n                                            <ListItemText primary={filterColumn}/>\r\n                                        </MenuItem>\r\n                                    ))}\r\n                                </Select>\r\n                            </FormControl>\r\n                        ) : (\r\n                            false\r\n                        ),\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        const {classes, columns, options, onFilterReset} = this.props;\r\n        const textLabels = options.textLabels.filter;\r\n\r\n        return (\r\n            <div className={classes.root}>\r\n                <div className={classes.header}>\r\n                    <div className={classes.reset}>\r\n                        <Typography\r\n                            variant=\"caption\"\r\n                            className={classNames({\r\n                                [classes.title]: true,\r\n                                [classes.noMargin]: options.filterType !== \"checkbox\" ? true : false,\r\n                            })}>\r\n                            {textLabels.title}\r\n                        </Typography>\r\n                        <button className={classes.resetLink} tabIndex={0} aria-label={textLabels.reset}\r\n                                onClick={onFilterReset}>\r\n                            {textLabels.reset}\r\n                        </button>\r\n                    </div>\r\n                    <div className={classes.filtersSelected}/>\r\n                </div>\r\n                {options.filterType === \"checkbox\"\r\n                    ? this.renderCheckbox(columns)\r\n                    : options.filterType === \"multiselect\"\r\n                        ? this.renderMultiselect(columns)\r\n                        : this.renderSelect(columns)}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(defaultFilterStyles, {name: \"MaterialDatatableFilter\"})(MaterialDatatableFilter);\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport FormGroup from \"@material-ui/core/FormGroup\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport {withStyles} from \"@material-ui/core/styles\";\r\n\r\nexport const defaultViewColStyles = {\r\n    root: {\r\n        padding: \"16px 24px 16px 24px\",\r\n        fontFamily: \"Roboto\",\r\n    },\r\n    title: {\r\n        marginLeft: \"-7px\",\r\n        fontSize: \"14px\",\r\n        color: \"#424242\",\r\n        textAlign: \"left\",\r\n        fontWeight: 500,\r\n    },\r\n    formGroup: {\r\n        marginTop: \"8px\",\r\n    },\r\n    formControl: {},\r\n    checkbox: {\r\n        width: \"32px\",\r\n        height: \"32px\",\r\n    },\r\n    checkboxRoot: {\r\n        \"&$checked\": {\r\n            color: \"#027cb5\",\r\n        },\r\n    },\r\n    checked: {},\r\n    label: {\r\n        fontSize: \"15px\",\r\n        marginLeft: \"8px\",\r\n        color: \"#4a4a4a\",\r\n    },\r\n};\r\n\r\nclass MaterialDatatableViewCol extends React.Component {\r\n    static propTypes = {\r\n        /** Columns used to describe table */\r\n        columns: PropTypes.array.isRequired,\r\n        /** Options used to describe table */\r\n        options: PropTypes.object.isRequired,\r\n        /** Callback to trigger View column update */\r\n        onColumnUpdate: PropTypes.func,\r\n        /** Extend the style applied to components */\r\n        classes: PropTypes.object,\r\n    };\r\n\r\n    handleColChange = index => {\r\n        this.props.onColumnUpdate(index);\r\n    };\r\n\r\n    render() {\r\n        const {classes, columns, options} = this.props;\r\n        const textLabels = options.textLabels.viewColumns;\r\n\r\n        return (\r\n            <FormControl component={\"fieldset\"} className={classes.root} aria-label={textLabels.titleAria}>\r\n                <Typography variant=\"caption\" className={classes.title}>\r\n                    {textLabels.title}\r\n                </Typography>\r\n                <FormGroup className={classes.formGroup}>\r\n                    {columns.map((column, index) => {\r\n                        return (\r\n                            column.display !== \"excluded\" && (\r\n                                <FormControlLabel\r\n                                    key={index}\r\n                                    classes={{\r\n                                        root: classes.formControl,\r\n                                        label: classes.label,\r\n                                    }}\r\n                                    control={\r\n                                        <Checkbox\r\n                                            className={classes.checkbox}\r\n                                            classes={{\r\n                                                root: classes.checkboxRoot,\r\n                                                checked: classes.checked,\r\n                                            }}\r\n                                            onChange={this.handleColChange.bind(null, index)}\r\n                                            checked={column.display === \"true\"}\r\n                                            value={column.name}\r\n                                        />\r\n                                    }\r\n                                    label={column.name}\r\n                                />\r\n                            )\r\n                        );\r\n                    })}\r\n                </FormGroup>\r\n            </FormControl>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(defaultViewColStyles, {name: \"MaterialDatatableViewCol\"})(MaterialDatatableViewCol);\r\n","import React from \"react\";\r\nimport Grow from \"@material-ui/core/Grow\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport ClearIcon from \"@material-ui/icons/Clear\";\r\nimport {withStyles} from \"@material-ui/core/styles\";\r\n\r\nconst defaultSearchStyles = {\r\n    main: {\r\n        display: \"flex\",\r\n        flex: \"1 0 auto\",\r\n    },\r\n    searchIcon: {\r\n        marginTop: \"10px\",\r\n        marginRight: \"8px\",\r\n    },\r\n    searchText: {\r\n        flex: \"0.8 0\",\r\n    },\r\n    clearIcon: {\r\n        \"&:hover\": {\r\n            color: \"#FF0000\",\r\n        },\r\n    },\r\n};\r\n\r\nclass MaterialDatatableSearch extends React.Component {\r\n    handleTextChange = event => {\r\n        const {onSearchChange} = this.props.options;\r\n\r\n        if (onSearchChange) {\r\n            onSearchChange(event.target.value);\r\n        }\r\n\r\n        this.props.onSearch(event.target.value);\r\n    };\r\n\r\n    componentDidMount() {\r\n        document.addEventListener(\"keydown\", this.onKeyDown, false);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        document.removeEventListener(\"keydown\", this.onKeyDown, false);\r\n    }\r\n\r\n    onKeyDown = event => {\r\n        if (event.keyCode === 27) {\r\n            this.props.onHide();\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const {classes, options, onHide} = this.props;\r\n\r\n        return (\r\n            <Grow appear in={true} timeout={300}>\r\n                <div className={classes.main} ref={el => (this.rootRef = el)}>\r\n                    <SearchIcon className={classes.searchIcon}/>\r\n                    <TextField\r\n                        className={classes.searchText}\r\n                        autoFocus={true}\r\n                        InputProps={{\r\n                            \"aria-label\": options.textLabels.toolbar.search,\r\n                        }}\r\n                        onChange={this.handleTextChange}\r\n                        fullWidth={true}\r\n                        inputRef={el => (this.searchField = el)}\r\n                    />\r\n                    <IconButton className={classes.clearIcon} onClick={onHide}>\r\n                        <ClearIcon/>\r\n                    </IconButton>\r\n                </div>\r\n            </Grow>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(defaultSearchStyles, {name: \"MaterialDatatableSearch\"})(MaterialDatatableSearch);\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport merge from \"lodash.merge\";\r\nimport {withStyles} from \"@material-ui/core/styles\";\r\n\r\n/*\r\n *  Material-UI does not yet support ability to grab props within style()\r\n *  https://github.com/mui-org/material-ui/issues/7633\r\n *\r\n *  This is a workaround provided from the thread\r\n */\r\n\r\nconst styles = (theme, props, style) => {\r\n    return typeof style === \"function\" ? style(theme, props) : style;\r\n};\r\n\r\nclass StyledComponent extends React.Component {\r\n    static propTypes = {\r\n        classes: PropTypes.object.isRequired,\r\n        className: PropTypes.string,\r\n    };\r\n\r\n    render() {\r\n        const {classes, className = \"\", WrappedComponent, ...passThroughProps} = this.props;\r\n\r\n        return <WrappedComponent classes={classes} className={className} {...passThroughProps} />;\r\n    }\r\n}\r\n\r\nconst styled = (WrappedComponent, customProps = {}) => {\r\n    return (style, options = {}) => {\r\n        const HOCProps = WrappedComponent => {\r\n            return class _HOCProps extends React.Component {\r\n                constructor(props) {\r\n                    super(props);\r\n                    this.FinalComponent = withStyles(theme => {\r\n                        const defaultStyles = styles(theme, props, style);\r\n                        return merge(defaultStyles, props.styles ? props.styles : {});\r\n                    }, options)(StyledComponent);\r\n                }\r\n\r\n                render() {\r\n                    const {styles, ...otherProps} = this.props;\r\n                    return <this.FinalComponent {...customProps} {...otherProps} WrappedComponent={WrappedComponent}/>;\r\n                }\r\n            };\r\n        };\r\n        return HOCProps(WrappedComponent);\r\n    };\r\n};\r\n\r\nexport default styled;\r\n","import React from \"react\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport {MaterialPopover, MaterialPopoverTarget, MaterialPopoverContent} from \"./MaterialPopover\";\r\nimport MaterialDatatableFilter from \"./MaterialDatatableFilter\";\r\nimport MaterialDatatableViewCol from \"./MaterialDatatableViewCol\";\r\nimport MaterialDatatableSearch from \"./MaterialDatatableSearch\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport DownloadIcon from \"@material-ui/icons/CloudDownload\";\r\nimport PrintIcon from \"@material-ui/icons/Print\";\r\nimport ViewColumnIcon from \"@material-ui/icons/ViewColumn\";\r\nimport FilterIcon from \"@material-ui/icons/FilterList\";\r\nimport ReactToPrint from \"react-to-print\";\r\nimport styled from \"./styled\";\r\n\r\nexport const defaultToolbarStyles = (theme, props) => ({\r\n    root: {},\r\n    left: {\r\n        flex: \"1 1 55%\",\r\n    },\r\n    actions: {\r\n        flex: \"0 0 45%\",\r\n        textAlign: \"right\",\r\n    },\r\n    titleRoot: {},\r\n    titleText: {},\r\n    icon: {\r\n        \"&:hover\": {\r\n            color: \"#307BB0\",\r\n        },\r\n    },\r\n    iconActive: {\r\n        color: \"#307BB0\",\r\n    },\r\n    searchIcon: {\r\n        display: \"inline-flex\",\r\n        marginTop: \"10px\",\r\n        marginRight: \"8px\",\r\n    },\r\n    ...(props.options.responsive ? {...responsiveToolbarStyles} : {}),\r\n});\r\n\r\nexport const responsiveToolbarStyles = {\r\n    \"@media screen and (max-width: 960px)\": {\r\n        titleRoot: {},\r\n        titleText: {\r\n            fontSize: \"16px\",\r\n        },\r\n        spacer: {\r\n            display: \"none\",\r\n        },\r\n        left: {\r\n            // flex: \"1 1 40%\",\r\n            padding: \"8px 0px\",\r\n        },\r\n        actions: {\r\n            // flex: \"1 1 60%\",\r\n            textAlign: \"right\",\r\n        },\r\n    },\r\n    \"@media screen and (max-width: 600px)\": {\r\n        root: {\r\n            display: \"block\",\r\n        },\r\n        left: {\r\n            padding: \"8px 0px 0px 0px\",\r\n        },\r\n        titleText: {\r\n            textAlign: \"center\",\r\n        },\r\n        actions: {\r\n            textAlign: \"center\",\r\n        },\r\n    },\r\n    \"@media screen and (max-width: 480px)\": {},\r\n};\r\n\r\nclass MaterialDatatableToolbar extends React.Component {\r\n    state = {\r\n        iconActive: null,\r\n        showSearch: false,\r\n    };\r\n\r\n    handleCSVDownload = () => {\r\n        const {data, columns, options} = this.props;\r\n\r\n        const CSVHead =\r\n            columns\r\n                .reduce((accumulator, column) => {\r\n                    return column.download ? `${accumulator}\"${column.name}\"${options.downloadOptions.separator}` : accumulator;\r\n                }, \"\")\r\n                .slice(0, -1) + \"\\r\\n\";\r\n\r\n        const CSVBody = data\r\n            .reduce(\r\n                (accumulator, row) =>\r\n                    accumulator +\r\n                    '\"' +\r\n                    row.data\r\n                        .filter((field, index) => columns[index].download)\r\n                        .join('\"' + options.downloadOptions.separator + '\"') +\r\n                    '\"\\r\\n',\r\n                [],\r\n            )\r\n            .trim();\r\n\r\n        /* taken from react-csv */\r\n        const csv = `${CSVHead}${CSVBody}`;\r\n        const blob = new Blob([csv], {type: \"text/csv\"});\r\n        const dataURI = `data:text/csv;charset=utf-8,${csv}`;\r\n\r\n        const URL = window.URL || window.webkitURL;\r\n        const downloadURI = typeof URL.createObjectURL === \"undefined\" ? dataURI : URL.createObjectURL(blob);\r\n\r\n        let link = document.createElement(\"a\");\r\n        link.setAttribute(\"href\", downloadURI);\r\n        link.setAttribute(\"download\", options.downloadOptions.filename);\r\n        document.body.appendChild(link);\r\n        link.click();\r\n        document.body.removeChild(link);\r\n    };\r\n\r\n    setActiveIcon = iconName => {\r\n        this.setState(() => ({\r\n            iconActive: iconName,\r\n            showSearch: iconName === \"search\" ? true : false,\r\n        }));\r\n    };\r\n\r\n    getActiveIcon = (styles, iconName) => {\r\n        return this.state.iconActive !== iconName ? styles.icon : styles.iconActive;\r\n    };\r\n\r\n    hideSearch = () => {\r\n        const {onSearchClose} = this.props.options;\r\n\r\n        if (onSearchClose) onSearchClose();\r\n        this.props.searchTextUpdate(null);\r\n\r\n        this.setState(() => ({\r\n            iconActive: null,\r\n            showSearch: false,\r\n        }));\r\n\r\n        this.searchButton.focus();\r\n    };\r\n\r\n    render() {\r\n        const {\r\n            data,\r\n            options,\r\n            classes,\r\n            columns,\r\n            filterData,\r\n            filterList,\r\n            filterUpdate,\r\n            resetFilters,\r\n            searchTextUpdate,\r\n            toggleViewColumn,\r\n            title,\r\n            tableRef,\r\n        } = this.props;\r\n\r\n        const {search, downloadCsv, print, viewColumns, filterTable} = options.textLabels.toolbar;\r\n        const {showSearch} = this.state;\r\n\r\n        return (\r\n            <Toolbar className={classes.root} role={\"toolbar\"} aria-label={\"Table Toolbar\"}>\r\n                <div className={classes.left}>\r\n                    {showSearch === true ? (\r\n                        <MaterialDatatableSearch onSearch={searchTextUpdate} onHide={this.hideSearch}\r\n                                                 options={options}/>\r\n                    ) : (\r\n                        <div className={classes.titleRoot} aria-hidden={\"true\"}>\r\n                            <Typography variant=\"h6\" className={classes.titleText}>\r\n                                {title}\r\n                            </Typography>\r\n                        </div>\r\n                    )}\r\n                </div>\r\n                <div className={classes.actions}>\r\n                    {options.search ? (\r\n                        <Tooltip title={search}>\r\n                            <IconButton\r\n                                aria-label={search}\r\n                                buttonRef={el => (this.searchButton = el)}\r\n                                classes={{root: this.getActiveIcon(classes, \"search\")}}\r\n                                onClick={this.setActiveIcon.bind(null, \"search\")}>\r\n                                <SearchIcon/>\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                    ) : (\r\n                        false\r\n                    )}\r\n                    {options.download ? (\r\n                        <Tooltip title={downloadCsv}>\r\n                            <IconButton aria-label={downloadCsv} classes={{root: classes.icon}}\r\n                                        onClick={this.handleCSVDownload}>\r\n                                <DownloadIcon/>\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                    ) : (\r\n                        false\r\n                    )}\r\n                    {options.print ? (\r\n                        <Tooltip title={print}>\r\n              <span>\r\n                <ReactToPrint\r\n                    trigger={() => (\r\n                        <IconButton aria-label={print} classes={{root: classes.icon}}>\r\n                            <PrintIcon/>\r\n                        </IconButton>\r\n                    )}\r\n                    content={() => this.props.tableRef()}\r\n                />\r\n              </span>\r\n                        </Tooltip>\r\n                    ) : (\r\n                        false\r\n                    )}\r\n                    {options.viewColumns ? (\r\n                        <MaterialPopover refExit={this.setActiveIcon.bind(null)} container={tableRef}>\r\n                            <MaterialPopoverTarget>\r\n                                <IconButton\r\n                                    aria-label={viewColumns}\r\n                                    classes={{root: this.getActiveIcon(classes, \"viewcolumns\")}}\r\n                                    onClick={this.setActiveIcon.bind(null, \"viewcolumns\")}>\r\n                                    <Tooltip title={viewColumns}>\r\n                                        <ViewColumnIcon/>\r\n                                    </Tooltip>\r\n                                </IconButton>\r\n                            </MaterialPopoverTarget>\r\n                            <MaterialPopoverContent>\r\n                                <MaterialDatatableViewCol\r\n                                    data={data}\r\n                                    columns={columns}\r\n                                    options={options}\r\n                                    onColumnUpdate={toggleViewColumn}\r\n                                />\r\n                            </MaterialPopoverContent>\r\n                        </MaterialPopover>\r\n                    ) : (\r\n                        false\r\n                    )}\r\n                    {options.filter ? (\r\n                        <MaterialPopover refExit={this.setActiveIcon.bind(null)} container={tableRef}>\r\n                            <MaterialPopoverTarget>\r\n                                <IconButton\r\n                                    aria-label={filterTable}\r\n                                    classes={{root: this.getActiveIcon(classes, \"filter\")}}\r\n                                    onClick={this.setActiveIcon.bind(null, \"filter\")}>\r\n                                    <Tooltip title={filterTable}>\r\n                                        <FilterIcon/>\r\n                                    </Tooltip>\r\n                                </IconButton>\r\n                            </MaterialPopoverTarget>\r\n                            <MaterialPopoverContent>\r\n                                <MaterialDatatableFilter\r\n                                    columns={columns}\r\n                                    options={options}\r\n                                    filterList={filterList}\r\n                                    filterData={filterData}\r\n                                    onFilterUpdate={filterUpdate}\r\n                                    onFilterReset={resetFilters}\r\n                                />\r\n                            </MaterialPopoverContent>\r\n                        </MaterialPopover>\r\n                    ) : (\r\n                        false\r\n                    )}\r\n                    {options.customToolbar ? options.customToolbar() : false}\r\n                </div>\r\n            </Toolbar>\r\n        );\r\n    }\r\n}\r\n\r\nexport default styled(MaterialDatatableToolbar)(defaultToolbarStyles, {name: \"MaterialDatatableToolbar\"});\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport {withStyles} from \"@material-ui/core/styles\";\r\n\r\nconst defaultToolbarSelectStyles = {\r\n    root: {\r\n        backgroundColor: \"#f7f7f7\",\r\n        flex: \"1 1 100%\",\r\n        display: \"flex\",\r\n        height: \"64px\",\r\n        justifyContent: \"space-between\",\r\n    },\r\n    title: {\r\n        paddingLeft: \"26px\",\r\n        top: \"50%\",\r\n        position: \"relative\",\r\n        transform: \"translateY(-50%)\",\r\n    },\r\n    iconButton: {\r\n        marginRight: \"24px\",\r\n        top: \"50%\",\r\n        display: \"block\",\r\n        position: \"relative\",\r\n        transform: \"translateY(-50%)\",\r\n    },\r\n    deleteIcon: {\r\n        color: \"#000\",\r\n    },\r\n};\r\n\r\nclass MaterialDatatableToolbarSelect extends React.Component {\r\n    static propTypes = {\r\n        /** Options used to describe table */\r\n        options: PropTypes.object.isRequired,\r\n        /** Current row selected or not */\r\n        rowSelected: PropTypes.bool,\r\n        /** Callback to trigger selected rows delete */\r\n        onRowsDelete: PropTypes.func,\r\n        /** Extend the style applied to components */\r\n        classes: PropTypes.object,\r\n    };\r\n\r\n    render() {\r\n        const {classes, onRowsDelete, selectedRows, options} = this.props;\r\n        const textLabels = options.textLabels.selectedRows;\r\n\r\n        return (\r\n            <Paper className={classes.root}>\r\n                <div>\r\n                    <Typography variant=\"subtitle1\" className={classes.title}>\r\n                        {selectedRows.data.length} {textLabels.text}\r\n                    </Typography>\r\n                </div>\r\n                {options.customToolbarSelect ? (\r\n                    options.customToolbarSelect(selectedRows)\r\n                ) : (\r\n                    <Tooltip title={textLabels.delete}>\r\n                        <IconButton className={classes.iconButton} onClick={onRowsDelete}\r\n                                    aria-label={textLabels.deleteAria}>\r\n                            <DeleteIcon className={classes.deleteIcon}/>\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                )}\r\n            </Paper>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(defaultToolbarSelectStyles, {name: \"MaterialDatatableToolbarSelect\"})(\r\n    MaterialDatatableToolbarSelect,\r\n);\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport {withStyles} from \"@material-ui/core/styles\";\r\n\r\nconst defaultFilterListStyles = {\r\n    root: {\r\n        display: \"flex\",\r\n        justifyContent: \"left\",\r\n        flexWrap: \"wrap\",\r\n        margin: \"0px 16px 0px 16px\",\r\n    },\r\n    chip: {\r\n        margin: \"8px 8px 0px 0px\",\r\n    },\r\n};\r\n\r\nclass MaterialDatatableFilterList extends React.Component {\r\n    static propTypes = {\r\n        /** Data used to filter table against */\r\n        filterList: PropTypes.array.isRequired,\r\n        /** Callback to trigger filter update */\r\n        onFilterUpdate: PropTypes.func,\r\n        /** Extend the style applied to components */\r\n        classes: PropTypes.object,\r\n    };\r\n\r\n    render() {\r\n        const {classes, filterList, filterUpdate} = this.props;\r\n\r\n        return (\r\n            <div className={classes.root}>\r\n                {filterList.map((item, index) =>\r\n                    item.map((data, colIndex) => (\r\n                        <Chip\r\n                            label={data}\r\n                            key={colIndex}\r\n                            onDelete={filterUpdate.bind(null, index, data, \"checkbox\")}\r\n                            className={classes.chip}\r\n                        />\r\n                    )),\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(defaultFilterListStyles, {name: \"MaterialDatatableFilterList\"})(\r\n    MaterialDatatableFilterList,\r\n);\r\n","import React from \"react\";\r\nimport classNames from \"classnames\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport {withStyles} from \"@material-ui/core/styles\";\r\n\r\nconst defaultBodyCellStyles = {\r\n    root: {\r\n        padding: \"4px 8px 4px 8px\",\r\n    },\r\n    cellHide: {\r\n        display: \"none\",\r\n    },\r\n    cellStacked: {\r\n        \"@media screen and (max-width: 960px)\": {\r\n            display: \"inline-block\",\r\n            backgroundColor: \"#FFF\",\r\n            fontSize: \"16px\",\r\n            height: \"24px\",\r\n            width: \"calc(50% - 80px)\",\r\n            whiteSpace: \"nowrap\",\r\n        },\r\n    },\r\n    responsiveStacked: {\r\n        \"@media screen and (max-width: 960px)\": {\r\n            display: \"inline-block\",\r\n            fontSize: \"16px\",\r\n            width: \"calc(50% - 80px)\",\r\n            whiteSpace: \"nowrap\",\r\n            height: \"24px\",\r\n        },\r\n    },\r\n};\r\n\r\nclass MaterialDatatableBodyCell extends React.Component {\r\n    handleClick = () => {\r\n        const {colIndex, options, children, dataIndex, rowIndex} = this.props;\r\n        if (options.onCellClick) {\r\n            options.onCellClick(children, {colIndex, rowIndex});\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const {children, classes, colIndex, columnHeader, options, dataIndex, rowIndex, ...otherProps} = this.props;\r\n\r\n        return [\r\n            <TableCell\r\n                key={1}\r\n                className={classNames({\r\n                    [classes.root]: true,\r\n                    [classes.cellHide]: true,\r\n                    [classes.cellStacked]: options.responsive === \"stacked\",\r\n                })}>\r\n                {columnHeader}\r\n            </TableCell>,\r\n            <TableCell\r\n                key={2}\r\n                onClick={this.handleClick}\r\n                className={classNames({\r\n                    [classes.root]: true,\r\n                    [classes.responsiveStacked]: options.responsive === \"stacked\",\r\n                })}\r\n                {...otherProps}>\r\n                {children}\r\n            </TableCell>,\r\n        ];\r\n    }\r\n}\r\n\r\nexport default withStyles(defaultBodyCellStyles, {name: \"MaterialDatatableBodyCell\"})(MaterialDatatableBodyCell);\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport classNames from \"classnames\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport {withStyles} from \"@material-ui/core/styles\";\r\n\r\nconst defaultBodyRowStyles = {\r\n    root: {},\r\n    responsiveStacked: {\r\n        \"@media screen and (max-width: 960px)\": {\r\n            border: \"solid 2px rgba(0, 0, 0, 0.15)\",\r\n        },\r\n    },\r\n};\r\n\r\nclass MaterialDatatableBodyRow extends React.Component {\r\n    static propTypes = {\r\n        /** Options used to describe table */\r\n        options: PropTypes.object.isRequired,\r\n        /** Callback to execute when row is clicked */\r\n        onClick: PropTypes.func,\r\n        /** Current row selected or not */\r\n        rowSelected: PropTypes.bool,\r\n        /** Extend the style applied to components */\r\n        classes: PropTypes.object,\r\n    };\r\n\r\n    render() {\r\n        const {classes, options, rowSelected, onClick} = this.props;\r\n\r\n        return (\r\n            <TableRow\r\n                hover={options.rowHover ? true : false}\r\n                onClick={onClick}\r\n                className={classNames({\r\n                    [classes.root]: true,\r\n                    [classes.responsiveStacked]: options.responsive === \"stacked\",\r\n                })}\r\n                selected={rowSelected}>\r\n                {this.props.children}\r\n            </TableRow>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(defaultBodyRowStyles, {name: \"MaterialDatatableBodyRow\"})(MaterialDatatableBodyRow);\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport {withStyles} from \"@material-ui/core/styles\";\r\n\r\nconst defaultSelectCellStyles = {\r\n    root: {\r\n        \"@media screen and (max-width: 960px)\": {\r\n            display: \"none\",\r\n        },\r\n    },\r\n    checkboxRoot: {\r\n        \"&$checked\": {\r\n            color: \"#027cb5\",\r\n        },\r\n    },\r\n    checked: {},\r\n    disabled: {},\r\n};\r\n\r\nclass MaterialDatatableSelectCell extends React.Component {\r\n    static propTypes = {\r\n        /** Select cell checked on/off */\r\n        checked: PropTypes.bool.isRequired,\r\n        /** Callback to trigger cell update */\r\n        onChange: PropTypes.func,\r\n        /** Extend the style applied to components */\r\n        classes: PropTypes.object,\r\n    };\r\n\r\n    render() {\r\n        const {classes, ...otherProps} = this.props;\r\n\r\n        return (\r\n            <TableCell className={classes.root} padding=\"checkbox\">\r\n                <Checkbox\r\n                    classes={{\r\n                        root: classes.checkboxRoot,\r\n                        checked: classes.checked,\r\n                        disabled: classes.disabled,\r\n                    }}\r\n                    {...otherProps}\r\n                />\r\n            </TableCell>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(defaultSelectCellStyles, {name: \"MaterialDatatableSelectCell\"})(\r\n    MaterialDatatableSelectCell,\r\n);\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport MaterialDatatableBodyCell from \"./MaterialDatatableBodyCell\";\r\nimport MaterialDatatableBodyRow from \"./MaterialDatatableBodyRow\";\r\nimport MaterialDatatableSelectCell from \"./MaterialDatatableSelectCell\";\r\nimport {withStyles} from \"@material-ui/core/styles\";\r\n\r\nconst defaultBodyStyles = {\r\n    root: {},\r\n    emptyTitle: {\r\n        textAlign: \"center\",\r\n    },\r\n};\r\n\r\nclass MaterialDatatableBody extends React.Component {\r\n    static propTypes = {\r\n        /** Data used to describe table */\r\n        data: PropTypes.array.isRequired,\r\n        /** Total number of data rows */\r\n        count: PropTypes.number.isRequired,\r\n        /** Columns used to describe table */\r\n        columns: PropTypes.array.isRequired,\r\n        /** Options used to describe table */\r\n        options: PropTypes.object.isRequired,\r\n        /** Data used to filter table against */\r\n        filterList: PropTypes.array,\r\n        /** Callback to execute when row is clicked */\r\n        onRowClick: PropTypes.func,\r\n        /** Table rows selected */\r\n        selectedRows: PropTypes.object,\r\n        /** Callback to trigger table row select */\r\n        selectRowUpdate: PropTypes.func,\r\n        /** Data used to search table against */\r\n        searchText: PropTypes.string,\r\n        /** Extend the style applied to components */\r\n        classes: PropTypes.object,\r\n    };\r\n\r\n    buildRows() {\r\n        const {data, page, rowsPerPage, count} = this.props;\r\n\r\n        if (this.props.options.serverSide) return data;\r\n\r\n        let rows = [];\r\n        const totalPages = Math.floor(count / rowsPerPage);\r\n        const fromIndex = page === 0 ? 0 : page * rowsPerPage;\r\n        const toIndex = Math.min(count, (page + 1) * rowsPerPage);\r\n\r\n        if (page > totalPages && totalPages !== 0) {\r\n            throw new Error(\r\n                \"Provided options.page of `\" +\r\n                page +\r\n                \"` is greater than the total available page length of `\" +\r\n                totalPages +\r\n                \"`\",\r\n            );\r\n        }\r\n\r\n        for (let rowIndex = fromIndex; rowIndex < count && rowIndex < toIndex; rowIndex++) {\r\n            if (data[rowIndex] !== undefined) rows.push(data[rowIndex]);\r\n        }\r\n\r\n        return rows.length ? rows : null;\r\n    }\r\n\r\n    getRowIndex(index) {\r\n        const {page, rowsPerPage, options} = this.props;\r\n\r\n        if (options.serverSide) {\r\n            return index;\r\n        }\r\n\r\n        const startIndex = page === 0 ? 0 : page * rowsPerPage;\r\n\r\n        return startIndex + index;\r\n    }\r\n\r\n    isRowSelected(index) {\r\n        const {selectedRows} = this.props;\r\n\r\n        return selectedRows.lookup && selectedRows.lookup[index] ? true : false;\r\n    }\r\n\r\n    handleRowSelect = data => {\r\n        this.props.selectRowUpdate(\"cell\", data);\r\n    };\r\n\r\n    render() {\r\n        const {classes, columns, options} = this.props;\r\n        const tableRows = this.buildRows();\r\n\r\n        return (\r\n            <TableBody>\r\n                {tableRows ? (\r\n                    tableRows.map(({data: row, dataIndex}, rowIndex) => (\r\n                        <MaterialDatatableBodyRow\r\n                            options={options}\r\n                            rowSelected={options.selectableRows ? this.isRowSelected(rowIndex) : false}\r\n                            onClick={\r\n                                options.onRowClick\r\n                                    ? options.onRowClick.bind(null, row, {\r\n                                        rowIndex,\r\n                                        dataIndex,\r\n                                    })\r\n                                    : null\r\n                            }\r\n                            id={\"MaterialDatatableBodyRow-\" + dataIndex}\r\n                            key={rowIndex}>\r\n                            {options.selectableRows ? (\r\n                                <MaterialDatatableSelectCell\r\n                                    onChange={this.handleRowSelect.bind(null, {\r\n                                        index: this.getRowIndex(rowIndex),\r\n                                        dataIndex: dataIndex,\r\n                                    })}\r\n                                    checked={this.isRowSelected(this.getRowIndex(rowIndex))}\r\n                                />\r\n                            ) : (\r\n                                false\r\n                            )}\r\n                            {row.map(\r\n                                (column, index) =>\r\n                                    columns[index].display === \"true\" ? (\r\n                                        <MaterialDatatableBodyCell\r\n                                            dataIndex={dataIndex}\r\n                                            rowIndex={rowIndex}\r\n                                            colIndex={index}\r\n                                            columnHeader={columns[index].name}\r\n                                            options={options}\r\n                                            key={index}>\r\n                                            {column}\r\n                                        </MaterialDatatableBodyCell>\r\n                                    ) : (\r\n                                        false\r\n                                    ),\r\n                            )}\r\n                        </MaterialDatatableBodyRow>\r\n                    ))\r\n                ) : (\r\n                    <MaterialDatatableBodyRow options={options}>\r\n                        <MaterialDatatableBodyCell\r\n                            colSpan={options.selectableRows ? columns.length + 1 : columns.length}\r\n                            options={options}\r\n                            colIndex={0}\r\n                            rowIndex={0}>\r\n                            <Typography variant=\"subtitle1\" className={classes.emptyTitle}>\r\n                                {options.textLabels.body.noMatch}\r\n                            </Typography>\r\n                        </MaterialDatatableBodyCell>\r\n                    </MaterialDatatableBodyRow>\r\n                )}\r\n            </TableBody>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(defaultBodyStyles, {name: \"MaterialDatatableBody\"})(MaterialDatatableBody);\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport classNames from \"classnames\";\r\nimport {findDOMNode} from \"react-dom\";\r\nimport {withStyles} from \"@material-ui/core/styles\";\r\n\r\nconst defaultResizeStyles = {\r\n    root: {\r\n        position: \"absolute\",\r\n    },\r\n    resizer: {\r\n        position: \"absolute\",\r\n        width: \"1px\",\r\n        height: \"100%\",\r\n        left: \"100px\",\r\n        cursor: \"ew-resize\",\r\n        border: \"0.1px solid rgba(224, 224, 224, 1)\",\r\n    },\r\n};\r\n\r\nclass MaterialDatatableResize extends React.Component {\r\n    static propTypes = {\r\n        /** Extend the style applied to components */\r\n        classes: PropTypes.object,\r\n    };\r\n\r\n    state = {\r\n        resizeCoords: {},\r\n        startPosition: 0,\r\n        tableWidth: \"100%\",\r\n        tableHeight: \"100%\",\r\n    };\r\n\r\n    handleReize = () => {\r\n        if (window.innerWidth !== this.windowWidth) {\r\n            this.windowWidth = window.innerWidth;\r\n            this.setDividers();\r\n        }\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.windowWidth = null;\r\n        this.props.setResizeable(this.setCellRefs);\r\n        window.addEventListener(\"resize\", this.handleReize, false);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener(\"resize\", this.handleReize, false);\r\n    }\r\n\r\n    setCellRefs = (cellsRef, tableRef) => {\r\n        this.cellsRef = cellsRef;\r\n        this.tableRef = tableRef;\r\n        this.setDividers();\r\n    };\r\n\r\n    setDividers = () => {\r\n        const tableEl = findDOMNode(this.tableRef);\r\n        const {width: tableWidth, height: tableHeight} = tableEl.getBoundingClientRect();\r\n\r\n        let resizeCoords = {};\r\n        let finalCells = Object.entries(this.cellsRef);\r\n\r\n        finalCells.forEach(([key, item]) => {\r\n            const elRect = item.getBoundingClientRect();\r\n            const elStyle = window.getComputedStyle(item, null);\r\n\r\n            resizeCoords[key] = {\r\n                left: elRect.left + item.offsetWidth - parseInt(elStyle.paddingLeft) / 2,\r\n            };\r\n        });\r\n\r\n        this.setState({tableWidth, tableHeight, resizeCoords}, this.updateWidths());\r\n    };\r\n\r\n    updateWidths = () => {\r\n        let lastPosition = 0;\r\n        const {resizeCoords, tableWidth, tableHeight} = this.state;\r\n\r\n        Object.entries(resizeCoords).forEach(([key, item]) => {\r\n            let newWidth = Number(((item.left - lastPosition) / tableWidth) * 100).toFixed(2);\r\n            item.percent = newWidth;\r\n            lastPosition = item.left;\r\n\r\n            const thCell = this.cellsRef[key];\r\n            thCell.style.width = newWidth + \"%\";\r\n        });\r\n    };\r\n\r\n    onResizeStart = (id, e) => {\r\n        this.setState({isResize: true, id, startPosition: e.clientX});\r\n    };\r\n\r\n    onResizeMove = (id, e) => {\r\n        const {startPosition, isResize, resizeCoords} = this.state;\r\n\r\n        if (isResize) {\r\n            const leftPos = startPosition - (startPosition - e.clientX);\r\n\r\n            const curCoord = {...resizeCoords[id], left: leftPos};\r\n            const newResizeCoords = {...resizeCoords, [id]: curCoord};\r\n\r\n            this.setState({resizeCoords: newResizeCoords}, this.updateWidths());\r\n        }\r\n    };\r\n\r\n    onResizeEnd = (id, e) => {\r\n        this.setState({isResize: false, id: null});\r\n    };\r\n\r\n    render() {\r\n        const {classes, options, rowSelected} = this.props;\r\n        const {id, isResize, resizeCoords, tableWidth, tableHeight} = this.state;\r\n\r\n        return (\r\n            <div className={classes.root} style={{width: tableWidth}}>\r\n                {Object.entries(resizeCoords).map(([key, val]) => {\r\n                    return (\r\n                        <div\r\n                            aria-hidden=\"true\"\r\n                            key={key}\r\n                            onMouseMove={this.onResizeMove.bind(null, key)}\r\n                            onMouseUp={this.onResizeEnd.bind(null, key)}\r\n                            style={{\r\n                                width: isResize && id == key ? tableWidth : \"auto\",\r\n                                position: \"absolute\",\r\n                                height: tableHeight,\r\n                                zIndex: 1000,\r\n                            }}>\r\n                            <div\r\n                                aria-hidden=\"true\"\r\n                                onMouseDown={this.onResizeStart.bind(null, key)}\r\n                                className={classes.resizer}\r\n                                style={{left: val.left}}\r\n                            />\r\n                        </div>\r\n                    );\r\n                })}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(defaultResizeStyles, {name: \"MaterialDatatableResize\"})(MaterialDatatableResize);\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport classNames from \"classnames\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport {withStyles} from \"@material-ui/core/styles\";\r\n\r\nconst defaultHeadRowStyles = {\r\n    root: {},\r\n};\r\n\r\nclass MaterialDatatableHeadRow extends React.Component {\r\n    static propTypes = {\r\n        /** Extend the style applied to components */\r\n        classes: PropTypes.object,\r\n    };\r\n\r\n    render() {\r\n        const {classes} = this.props;\r\n\r\n        return (\r\n            <TableRow\r\n                className={classNames({\r\n                    [classes.root]: true,\r\n                })}>\r\n                {this.props.children}\r\n            </TableRow>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(defaultHeadRowStyles, {name: \"MaterialDatatableHeadRow\"})(MaterialDatatableHeadRow);\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport classNames from \"classnames\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableSortLabel from \"@material-ui/core/TableSortLabel\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport {withStyles} from \"@material-ui/core/styles\";\r\n\r\nconst defaultHeadCellStyles = {\r\n    root: {\r\n        padding: \"4px 8px 4px 8px\",\r\n    },\r\n    tooltip: {\r\n        cursor: \"pointer\",\r\n    },\r\n    mypopper: {\r\n        \"&[data-x-out-of-boundaries]\": {\r\n            display: \"none\",\r\n        },\r\n    },\r\n    data: {\r\n        display: \"inline-block\",\r\n    },\r\n    sortAction: {\r\n        display: \"inline-block\",\r\n        verticalAlign: \"top\",\r\n        cursor: \"pointer\",\r\n        paddingLeft: \"4px\",\r\n        height: \"10px\",\r\n    },\r\n    sortActive: {\r\n        color: \"rgba(0, 0, 0, 0.87)\",\r\n    },\r\n    toolButton: {\r\n        height: \"10px\",\r\n        outline: \"none\",\r\n        cursor: \"pointer\",\r\n    },\r\n};\r\n\r\nclass MaterialDatatableHeadCell extends React.Component {\r\n    static propTypes = {\r\n        /** Extend the style applied to components */\r\n        classes: PropTypes.object,\r\n        /** Options used to describe table */\r\n        options: PropTypes.object.isRequired,\r\n        /** Current sort direction */\r\n        sortDirection: PropTypes.string,\r\n        /** Callback to trigger column sort */\r\n        toggleSort: PropTypes.func.isRequired,\r\n        /** Sort enabled / disabled for this column **/\r\n        sort: PropTypes.bool.isRequired,\r\n    };\r\n\r\n    handleSortClick = () => {\r\n        this.props.toggleSort(this.props.index);\r\n    };\r\n\r\n    render() {\r\n        const {children, classes, options, sortDirection, sort, width, headerNoWrap} = this.props;\r\n        const sortActive = sortDirection !== null && sortDirection !== undefined ? true : false;\r\n        const sortLabelProps = {\r\n            active: sortActive,\r\n            ...(sortDirection ? {direction: sortDirection} : {}),\r\n        };\r\n\r\n        return (\r\n            <TableCell\r\n                className={classes.root}\r\n                scope={\"col\"}\r\n                style={{width: width, whiteSpace: headerNoWrap !== null && headerNoWrap === true ? \"nowrap\" : \"normal\"}}\r\n                sortDirection={sortDirection}>\r\n                {options.sort && sort ? (\r\n                    <Tooltip\r\n                        title={options.textLabels.body.toolTip}\r\n                        placement={\"bottom-end\"}\r\n                        enterDelay={300}\r\n                        classes={{popper: classes.mypopper, tooltip: classes.tooltip}}>\r\n            <span\r\n                role=\"button\"\r\n                onKeyUp={() => {\r\n                }}\r\n                onClick={this.handleSortClick}\r\n                className={classes.toolButton}\r\n                tabIndex={0}>\r\n              <div\r\n                  className={classNames({\r\n                      [classes.data]: true,\r\n                      [classes.sortActive]: sortActive,\r\n                  })}>\r\n                {children}\r\n              </div>\r\n              <div className={classes.sortAction}>\r\n                <TableSortLabel {...sortLabelProps} />\r\n              </div>\r\n            </span>\r\n                    </Tooltip>\r\n                ) : (\r\n                    children\r\n                )}\r\n            </TableCell>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(defaultHeadCellStyles, {name: \"MaterialDatatableHeadCell\"})(MaterialDatatableHeadCell);\r\n","import React from \"react\";\r\nimport {findDOMNode} from \"react-dom\";\r\nimport classNames from \"classnames\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport MaterialDatatableHeadRow from \"./MaterialDatatableHeadRow\";\r\nimport MaterialDatatableHeadCell from \"./MaterialDatatableHeadCell\";\r\nimport MaterialDatatableSelectCell from \"./MaterialDatatableSelectCell\";\r\nimport {withStyles} from \"@material-ui/core/styles\";\r\n\r\nconst defaultHeadStyles = {\r\n    main: {},\r\n    responsiveStacked: {\r\n        \"@media screen and (max-width: 960px)\": {\r\n            display: \"none\",\r\n        },\r\n    },\r\n};\r\n\r\nclass MaterialDatatableHead extends React.Component {\r\n    componentDidMount() {\r\n        this.props.handleHeadUpdateRef(this.handleUpdateCheck);\r\n    }\r\n\r\n    handleToggleColumn = index => {\r\n        this.props.toggleSort(index);\r\n    };\r\n\r\n    handleRowSelect = () => {\r\n        this.props.selectRowUpdate(\"head\", null);\r\n    };\r\n\r\n    render() {\r\n        const {classes, columns, count, options, setCellRef, selectedRows} = this.props;\r\n\r\n        const numSelected = (selectedRows && selectedRows.data.length) || 0;\r\n        const isDeterminate = numSelected > 0 && numSelected < count;\r\n        const isChecked = numSelected === count ? true : false;\r\n\r\n        return (\r\n            <TableHead\r\n                className={classNames({\r\n                    [classes.responsiveStacked]: options.responsive === \"stacked\",\r\n                    [classes.main]: true\r\n                })}>\r\n                <MaterialDatatableHeadRow>\r\n                    {options.selectableRows && (\r\n                        <MaterialDatatableSelectCell\r\n                            ref={el => setCellRef(0, findDOMNode(el))}\r\n                            onChange={this.handleRowSelect.bind(null)}\r\n                            indeterminate={isDeterminate}\r\n                            checked={isChecked}\r\n                        />\r\n                    )}\r\n                    {columns.map(\r\n                        (column, index) =>\r\n                            column.display === \"true\" &&\r\n                            (column.customHeadRender ? (\r\n                                column.customHeadRender({index, ...column}, this.handleToggleColumn)\r\n                            ) : (\r\n                                <MaterialDatatableHeadCell\r\n                                    key={index}\r\n                                    index={index}\r\n                                    type={\"cell\"}\r\n                                    ref={el => setCellRef(index + 1, findDOMNode(el))}\r\n                                    sort={column.sort}\r\n                                    width={column.width}\r\n                                    headerNoWrap={column.headerNoWrap}\r\n                                    sortDirection={column.sortDirection}\r\n                                    toggleSort={this.handleToggleColumn}\r\n                                    options={options}>\r\n                                    {column.name}\r\n                                </MaterialDatatableHeadCell>\r\n                            )),\r\n                    )}\r\n                </MaterialDatatableHeadRow>\r\n            </TableHead>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(defaultHeadStyles, {name: \"MaterialDatatableHead\"})(MaterialDatatableHead);\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableFooter from \"@material-ui/core/TableFooter\";\r\nimport TablePagination from \"@material-ui/core/TablePagination\";\r\nimport {withStyles} from \"@material-ui/core/styles\";\r\n\r\nconst defaultPaginationStyles = {\r\n    root: {\r\n        \"&:last-child\": {\r\n            padding: \"0px 24px 0px 24px\",\r\n        },\r\n    },\r\n    toolbar: {},\r\n    selectRoot: {},\r\n    \"@media screen and (max-width: 400px)\": {\r\n        toolbar: {\r\n            \"& span:nth-child(2)\": {\r\n                display: \"none\",\r\n            },\r\n        },\r\n        selectRoot: {\r\n            marginRight: \"8px\",\r\n        },\r\n    },\r\n};\r\n\r\nclass MaterialDatatablePagination extends React.Component {\r\n    static propTypes = {\r\n        /** Total number of table rows */\r\n        count: PropTypes.number.isRequired,\r\n        /** Options used to describe table */\r\n        options: PropTypes.object.isRequired,\r\n        /** Current page index */\r\n        page: PropTypes.number.isRequired,\r\n        /** Total number allowed of rows per page */\r\n        rowsPerPage: PropTypes.number.isRequired,\r\n        /** Callback to trigger rows per page change */\r\n        changeRowsPerPage: PropTypes.func.isRequired,\r\n    };\r\n\r\n    handleRowChange = event => {\r\n        this.props.changeRowsPerPage(event.target.value);\r\n    };\r\n\r\n    handlePageChange = (_, page) => {\r\n        const {options} = this.props;\r\n        this.props.changePage(page);\r\n    };\r\n\r\n    render() {\r\n        const {count, classes, options, rowsPerPage, page} = this.props;\r\n        const textLabels = options.textLabels.pagination;\r\n\r\n        return (\r\n            <TableFooter>\r\n                <TableRow>\r\n                    <TablePagination\r\n                        className={classes.root}\r\n                        classes={{\r\n                            caption: classes.caption,\r\n                            toolbar: classes.toolbar,\r\n                            selectRoot: classes.selectRoot,\r\n                        }}\r\n                        count={count}\r\n                        rowsPerPage={rowsPerPage}\r\n                        page={page}\r\n                        labelRowsPerPage={textLabels.rowsPerPage}\r\n                        labelDisplayedRows={({from, to, count}) => `${from}-${to} ${textLabels.displayRows} ${count}`}\r\n                        backIconButtonProps={{\r\n                            \"aria-label\": textLabels.previous,\r\n                        }}\r\n                        nextIconButtonProps={{\r\n                            \"aria-label\": textLabels.next,\r\n                        }}\r\n                        rowsPerPageOptions={options.rowsPerPageOptions}\r\n                        onChangePage={this.handlePageChange}\r\n                        onChangeRowsPerPage={this.handleRowChange}\r\n                    />\r\n                </TableRow>\r\n            </TableFooter>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(defaultPaginationStyles, {name: \"MaterialDatatablePagination\"})(\r\n    MaterialDatatablePagination,\r\n);\r\n","/*\r\n * Default text labels.\r\n */\r\nconst textLabels = {\r\n    body: {\r\n        noMatch: \"Sorry, no matching records found\",\r\n        toolTip: \"Sort\",\r\n    },\r\n    pagination: {\r\n        next: \"Next Page\",\r\n        previous: \"Previous Page\",\r\n        rowsPerPage: \"Rows per page:\",\r\n        displayRows: \"of\",\r\n    },\r\n    toolbar: {\r\n        search: \"Search\",\r\n        downloadCsv: \"Download CSV\",\r\n        print: \"Print\",\r\n        viewColumns: \"View Columns\",\r\n        filterTable: \"Filter Table\",\r\n    },\r\n    filter: {\r\n        all: \"All\",\r\n        title: \"FILTERS\",\r\n        reset: \"RESET\",\r\n    },\r\n    viewColumns: {\r\n        title: \"Show Columns\",\r\n        titleAria: \"Show/Hide Table Columns\",\r\n    },\r\n    selectedRows: {\r\n        text: \"rows(s) selected\",\r\n        delete: \"Delete\",\r\n        deleteAria: \"Delete Selected Rows\",\r\n    },\r\n};\r\n\r\nexport default textLabels;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport MaterialDatatableToolbar from \"./MaterialDatatableToolbar\";\r\nimport MaterialDatatableToolbarSelect from \"./MaterialDatatableToolbarSelect\";\r\nimport MaterialDatatableFilterList from \"./MaterialDatatableFilterList\";\r\nimport MaterialDatatableBody from \"./MaterialDatatableBody\";\r\nimport MaterialDatatableResize from \"./MaterialDatatableResize\";\r\nimport MaterialDatatableHead from \"./MaterialDatatableHead\";\r\nimport MaterialDatatablePagination from \"./MaterialDatatablePagination\";\r\nimport cloneDeep from \"lodash.clonedeep\";\r\nimport merge from \"lodash.merge\";\r\nimport textLabels from \"./textLabels\";\r\nimport {withStyles} from \"@material-ui/core/styles\";\r\n\r\nconst defaultTableStyles = {\r\n    root: {},\r\n    responsiveScroll: {\r\n        overflowX: \"auto\",\r\n    },\r\n    caption: {\r\n        position: \"absolute\",\r\n        left: \"-1000px\",\r\n    },\r\n    liveAnnounce: {\r\n        border: \"0\",\r\n        clip: \"rect(0 0 0 0)\",\r\n        height: \"1px\",\r\n        margin: \"-1px\",\r\n        overflow: \"hidden\",\r\n        padding: \"0\",\r\n        position: \"absolute\",\r\n        width: \"1px\",\r\n    },\r\n};\r\n\r\nconst TABLE_LOAD = {\r\n    INITIAL: 1,\r\n    UPDATE: 2,\r\n};\r\n\r\nclass MaterialDatatable extends React.Component {\r\n    static propTypes = {\r\n        /** Title of the table */\r\n        title: PropTypes.string.isRequired,\r\n        /** Data used to describe table */\r\n        data: PropTypes.array.isRequired,\r\n        /** Columns used to describe table */\r\n        columns: PropTypes.PropTypes.arrayOf(\r\n            PropTypes.oneOfType([\r\n                PropTypes.string,\r\n                PropTypes.shape({\r\n                    name: PropTypes.string.isRequired,\r\n                    options: PropTypes.shape({\r\n                        display: PropTypes.string, // enum('true', 'false', 'excluded')\r\n                        filter: PropTypes.bool,\r\n                        width: PropTypes.number,\r\n                        headerNoWrap: PropTypes.bool,\r\n                        sort: PropTypes.bool,\r\n                        download: PropTypes.bool,\r\n                        customHeadRender: PropTypes.func,\r\n                        customBodyRender: PropTypes.func,\r\n                    }),\r\n                }),\r\n            ]),\r\n        ).isRequired,\r\n        /** Options used to describe table */\r\n        options: PropTypes.shape({\r\n            responsive: PropTypes.oneOf([\"stacked\", \"scroll\"]),\r\n            filterType: PropTypes.oneOf([\"dropdown\", \"checkbox\", \"multiselect\"]),\r\n            textLabels: PropTypes.object,\r\n            pagination: PropTypes.bool,\r\n            usePaperPlaceholder: PropTypes.bool,\r\n            customToolbar: PropTypes.oneOfType([PropTypes.func, PropTypes.element]),\r\n            customToolbarSelect: PropTypes.oneOfType([PropTypes.func, PropTypes.element]),\r\n            customFooter: PropTypes.oneOfType([PropTypes.func, PropTypes.element]),\r\n            onRowClick: PropTypes.func,\r\n            resizableColumns: PropTypes.bool,\r\n            selectableRows: PropTypes.bool,\r\n            serverSide: PropTypes.bool,\r\n            onTableChange: PropTypes.func,\r\n            caseSensitive: PropTypes.bool,\r\n            rowHover: PropTypes.bool,\r\n            page: PropTypes.number,\r\n            count: PropTypes.number,\r\n            filterList: PropTypes.array,\r\n            rowsSelected: PropTypes.array,\r\n            rowsPerPage: PropTypes.number,\r\n            rowsPerPageOptions: PropTypes.array,\r\n            filter: PropTypes.bool,\r\n            sort: PropTypes.bool,\r\n            search: PropTypes.bool,\r\n            print: PropTypes.bool,\r\n            viewColumns: PropTypes.bool,\r\n            download: PropTypes.bool,\r\n            downloadOptions: PropTypes.shape({\r\n                filename: PropTypes.string,\r\n                separator: PropTypes.string,\r\n            }),\r\n        }),\r\n        /** Pass and use className to style MaterialDatatable as desired */\r\n        className: PropTypes.string,\r\n    };\r\n\r\n    static defaultProps = {\r\n        title: \"\",\r\n        options: {},\r\n        data: [],\r\n        columns: [],\r\n    };\r\n\r\n    state = {\r\n        announceText: null,\r\n        activeColumn: null,\r\n        data: [],\r\n        displayData: [],\r\n        page: 0,\r\n        rowsPerPage: 0,\r\n        columns: [],\r\n        filterData: [],\r\n        filterList: [],\r\n        selectedRows: {\r\n            data: [],\r\n            lookup: {},\r\n        },\r\n        showResponsive: false,\r\n        searchText: null,\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.tableRef = false;\r\n        this.headCellRefs = {};\r\n        this.setHeadResizeable = () => {\r\n        };\r\n    }\r\n\r\n    componentWillMount() {\r\n        this.initializeTable(this.props);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setHeadResizeable(this.headCellRefs, this.tableRef);\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        if (this.props.data !== nextProps.data || this.props.columns !== nextProps.columns) {\r\n            this.initializeTable(nextProps);\r\n        }\r\n    }\r\n\r\n    initializeTable(props) {\r\n        this.getDefaultOptions(props);\r\n        this.setTableOptions(props);\r\n        this.setTableData(props, TABLE_LOAD.INITIAL);\r\n    }\r\n\r\n    //React currently does not support deep merge for defaultProps. Objects are overwritten\r\n    getDefaultOptions(props) {\r\n        const defaultOptions = {\r\n            responsive: \"stacked\",\r\n            filterType: \"checkbox\",\r\n            usePaperPlaceholder: true,\r\n            pagination: true,\r\n            textLabels,\r\n            resizableColumns: false,\r\n            selectableRows: true,\r\n            caseSensitive: false,\r\n            serverSide: false,\r\n            rowHover: true,\r\n            rowsPerPage: 10,\r\n            rowsPerPageOptions: [10, 15, 100],\r\n            filter: true,\r\n            sortFilterList: true,\r\n            sort: true,\r\n            search: true,\r\n            print: true,\r\n            viewColumns: true,\r\n            download: true,\r\n            downloadOptions: {\r\n                filename: \"tableDownload.csv\",\r\n                separator: \",\",\r\n            },\r\n        };\r\n\r\n        this.options = merge(defaultOptions, props.options);\r\n    }\r\n\r\n    validateOptions(options) {\r\n        if (options.serverSide && options.onTableChange === undefined) {\r\n            throw Error(\"onTableChange callback must be provided when using serverSide option\");\r\n        }\r\n    }\r\n\r\n    setTableAction = action => {\r\n        if (typeof this.options.onTableChange === \"function\") {\r\n            this.options.onTableChange(action, this.state);\r\n        }\r\n    };\r\n\r\n    setTableOptions(props) {\r\n        const optionNames = [\"rowsPerPage\", \"page\", \"rowsSelected\", \"filterList\", \"rowsPerPageOptions\"];\r\n        const optState = optionNames.reduce((acc, cur) => {\r\n            if (this.options[cur] !== undefined) {\r\n                acc[cur] = this.options[cur];\r\n            }\r\n            return acc;\r\n        }, {});\r\n\r\n        this.validateOptions(optState);\r\n        this.setState(optState);\r\n    }\r\n\r\n    setHeadCellRef = (index, el) => {\r\n        this.headCellRefs[index] = el;\r\n    };\r\n\r\n    // Build the source table data\r\n    setTableData(props, status, callback = () => {\r\n    }) {\r\n        const {data, columns, options} = props;\r\n\r\n        let columnData = [],\r\n            filterData = [],\r\n            filterList = [],\r\n            tableData = [];\r\n\r\n        columns.forEach((column, colIndex) => {\r\n            let columnOptions = {\r\n                display: \"true\",\r\n                filter: true,\r\n                sort: true,\r\n                download: true,\r\n                sortDirection: null,\r\n                width: null,\r\n                headerNoWrap: null,\r\n            };\r\n\r\n            if (typeof column === \"object\") {\r\n                if (column.options && column.options.display !== undefined) {\r\n                    column.options.display = column.options.display.toString();\r\n                }\r\n\r\n                columnOptions = {\r\n                    name: column.name,\r\n                    field: column.field,\r\n                    ...columnOptions,\r\n                    ...(column.options ? column.options : {}),\r\n                };\r\n            } else {\r\n                columnOptions = {...columnOptions, name: column};\r\n            }\r\n\r\n            columnData.push(columnOptions);\r\n\r\n            filterData[colIndex] = [];\r\n            filterList[colIndex] = [];\r\n\r\n            for (let rowIndex = 0; rowIndex < data.length; rowIndex++) {\r\n                let rowData = status === TABLE_LOAD.INITIAL ? data[rowIndex] : data[rowIndex].data;\r\n                let value = rowData[column.field];\r\n\r\n                if (typeof tableData[rowIndex] === \"undefined\") {\r\n                    tableData.push({\r\n                        index: status === TABLE_LOAD.INITIAL ? rowIndex : data[rowIndex].index,\r\n                        data: status === TABLE_LOAD.INITIAL ? data[rowIndex] : data[rowIndex].data,\r\n                    });\r\n                }\r\n\r\n                if (typeof columnOptions.customBodyRender === \"function\") {\r\n                    const tableMeta = this.getTableMeta(rowIndex, colIndex, value, [], columnData, this.state);\r\n                    const funcResult = columnOptions.customBodyRender(rowData, tableMeta);\r\n\r\n                    if (React.isValidElement(funcResult) && funcResult.props.value) {\r\n                        value = funcResult.props.value;\r\n                    } else if (typeof funcResult === \"string\") {\r\n                        value = funcResult;\r\n                    }\r\n                }\r\n\r\n                if (filterData[colIndex].indexOf(value) < 0) filterData[colIndex].push(value);\r\n            }\r\n\r\n            if (this.options.sortFilterList) {\r\n                const collator = new Intl.Collator(undefined, {numeric: true, sensitivity: \"base\"});\r\n                filterData[colIndex].sort(collator.compare);\r\n            }\r\n        });\r\n\r\n        if (options.filterList) filterList = options.filterList;\r\n\r\n        if (filterList.length !== columns.length) {\r\n            throw new Error(\"Provided options.filterList does not match the column length\");\r\n        }\r\n\r\n        let selectedRowsData = {\r\n            data: [],\r\n            lookup: {},\r\n        };\r\n\r\n        if (TABLE_LOAD.INITIAL) {\r\n            if (options.rowsSelected && options.rowsSelected.length) {\r\n                options.rowsSelected.forEach(row => {\r\n                    selectedRowsData.data.push({index: row, dataIndex: row});\r\n                    selectedRowsData.lookup[row] = true;\r\n                });\r\n            }\r\n        }\r\n\r\n        /* set source data and display Data set source set */\r\n        this.setState(\r\n            prevState => ({\r\n                columns: columnData,\r\n                filterData: filterData,\r\n                filterList: filterList,\r\n                selectedRows: selectedRowsData,\r\n                data: tableData,\r\n                displayData: this.getDisplayData(columnData, tableData, filterList, prevState.searchText),\r\n            }),\r\n            callback,\r\n        );\r\n    }\r\n\r\n    computeDisplayRow(columns, row, rowIndex, filterList, searchText) {\r\n        let isFiltered = false;\r\n        let isSearchFound = false;\r\n        let displayRow = [];\r\n\r\n        // go through all record columns -> need to change to go thru column definition\r\n        for (let index = 0; index < columns.length; index++) {\r\n            let columnDisplay = row[columns[index].field];\r\n            let columnValue = row[columns[index].field];\r\n\r\n            if (columns[index].customBodyRender) {\r\n                const tableMeta = this.getTableMeta(rowIndex, index, row, columns[index], this.state.data, {\r\n                    ...this.state,\r\n                    filterList: filterList,\r\n                    searchText: searchText,\r\n                });\r\n\r\n                const funcResult = columns[index].customBodyRender(\r\n                    row,\r\n                    tableMeta,\r\n                    this.updateDataCol.bind(null, rowIndex, index),\r\n                );\r\n                columnDisplay = funcResult;\r\n\r\n                /* drill down to get the value of a cell */\r\n                columnValue =\r\n                    typeof funcResult === \"string\"\r\n                        ? funcResult\r\n                        : funcResult.props && funcResult.props.value\r\n                        ? funcResult.props.value\r\n                        : columnValue;\r\n            }\r\n\r\n            displayRow.push(columnDisplay);\r\n\r\n            if (filterList[index].length && filterList[index].indexOf(columnValue) < 0) {\r\n                isFiltered = true;\r\n            }\r\n\r\n            const columnVal = columnValue === null ? \"\" : columnValue.toString();\r\n\r\n            if (searchText) {\r\n                let searchNeedle = searchText.toString();\r\n                let searchStack = columnVal.toString();\r\n\r\n                if (!this.options.caseSensitive) {\r\n                    searchNeedle = searchNeedle.toLowerCase();\r\n                    searchStack = searchStack.toLowerCase();\r\n                }\r\n\r\n                if (searchStack.indexOf(searchNeedle) >= 0) {\r\n                    isSearchFound = true;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (isFiltered || (searchText && !isSearchFound)) return null;\r\n        else return displayRow;\r\n    }\r\n\r\n    updateDataCol = (row, index, value) => {\r\n        this.setState(prevState => {\r\n            let changedData = cloneDeep(prevState.data);\r\n            let filterData = cloneDeep(prevState.filterData);\r\n\r\n            const tableMeta = this.getTableMeta(row, index, row, prevState.columns[index], prevState.data, prevState);\r\n            const funcResult = prevState.columns[index].customBodyRender(value, tableMeta);\r\n\r\n            const filterValue =\r\n                React.isValidElement(funcResult) && funcResult.props.value\r\n                    ? funcResult.props.value\r\n                    : prevState[\"data\"][row][index];\r\n\r\n            const prevFilterIndex = filterData[index].indexOf(filterValue);\r\n            filterData[index].splice(prevFilterIndex, 1, filterValue);\r\n\r\n            changedData[row].data[index] = value;\r\n\r\n            if (this.options.sortFilterList) {\r\n                const collator = new Intl.Collator(undefined, {numeric: true, sensitivity: \"base\"});\r\n                filterData[index].sort(collator.compare);\r\n            }\r\n\r\n            return {\r\n                data: changedData,\r\n                filterData: filterData,\r\n                displayData: this.getDisplayData(prevState.columns, changedData, prevState.filterList, prevState.searchText),\r\n            };\r\n        });\r\n    };\r\n\r\n    getTableMeta = (rowIndex, colIndex, rowData, columnData, tableData, curState) => {\r\n        const {columns, data, displayData, filterData, ...tableState} = curState;\r\n\r\n        return {\r\n            rowIndex: rowIndex,\r\n            columnIndex: colIndex,\r\n            columnData: columnData,\r\n            rowData: rowData,\r\n            tableData: tableData,\r\n            tableState: tableState,\r\n        };\r\n    };\r\n\r\n    getDisplayData(columns, records, filterList, searchText) {\r\n        let newRows = [];\r\n\r\n        for (let index = 0; index < records.length; index++) {\r\n            const value = records[index].data;\r\n            const displayRow = this.computeDisplayRow(columns, value, index, filterList, searchText);\r\n\r\n            if (displayRow) {\r\n                newRows.push({\r\n                    data: displayRow,\r\n                    dataIndex: records[index].index,\r\n                });\r\n            }\r\n        }\r\n\r\n        return newRows;\r\n    }\r\n\r\n    toggleViewColumn = index => {\r\n        this.setState(\r\n            prevState => {\r\n                const columns = cloneDeep(prevState.columns);\r\n                columns[index].display = columns[index].display === \"true\" ? \"false\" : \"true\";\r\n                return {\r\n                    columns: columns,\r\n                };\r\n            },\r\n            () => {\r\n                this.setTableAction(\"columnViewChange\");\r\n                if (this.options.onColumnViewChange) {\r\n                    this.options.onColumnViewChange(\r\n                        this.state.columns[index].name,\r\n                        this.state.columns[index].display === \"true\" ? \"add\" : \"remove\",\r\n                    );\r\n                }\r\n            },\r\n        );\r\n    };\r\n\r\n    getSortDirection(column) {\r\n        return column.sortDirection === \"asc\" ? \"ascending\" : \"descending\";\r\n    }\r\n\r\n    toggleSortColumn = index => {\r\n        this.setState(\r\n            prevState => {\r\n                let columns = cloneDeep(prevState.columns);\r\n                let data = prevState.data;\r\n                let displayData = prevState.displayData;\r\n                let order = prevState.columns[index].sortDirection;\r\n\r\n                for (let pos = 0; pos < columns.length; pos++) {\r\n                    if (index !== pos) {\r\n                        columns[pos].sortDirection = null;\r\n                    } else {\r\n                        columns[pos].sortDirection = columns[pos].sortDirection === \"asc\" ? \"desc\" : \"asc\";\r\n                    }\r\n                }\r\n\r\n                const orderLabel = this.getSortDirection(columns[index]);\r\n                const announceText = `Table now sorted by ${columns[index].name} : ${orderLabel}`;\r\n\r\n                let newState = {\r\n                    columns: columns,\r\n                    announceText: announceText,\r\n                    activeColumn: index,\r\n                };\r\n\r\n                if (this.options.serverSide) {\r\n                    newState = {\r\n                        ...newState,\r\n                        data: prevState.data,\r\n                        displayData: prevState.displayData,\r\n                        selectedRows: prevState.selectedRows,\r\n                    };\r\n                } else {\r\n                    const sortedData = this.sortTable(data, index, order, displayData);\r\n\r\n                    newState = {\r\n                        ...newState,\r\n                        data: sortedData.data,\r\n                        displayData: this.getDisplayData(columns, sortedData.data, prevState.filterList, prevState.searchText),\r\n                        selectedRows: sortedData.selectedRows,\r\n                    };\r\n                }\r\n\r\n                return newState;\r\n            },\r\n            () => {\r\n                this.setTableAction(\"sort\");\r\n                if (this.options.onColumnSortChange) {\r\n                    this.options.onColumnSortChange(\r\n                        this.state.columns[index].name,\r\n                        this.getSortDirection(this.state.columns[index]),\r\n                    );\r\n                }\r\n            },\r\n        );\r\n    };\r\n\r\n    changeRowsPerPage = rows => {\r\n        this.setState(\r\n            () => ({\r\n                rowsPerPage: rows,\r\n            }),\r\n            () => {\r\n                this.setTableAction(\"changeRowsPerPage\");\r\n                if (this.options.onChangeRowsPerPage) {\r\n                    this.options.onChangeRowsPerPage(this.state.rowsPerPage);\r\n                }\r\n            },\r\n        );\r\n    };\r\n\r\n    changePage = page => {\r\n        this.setState(\r\n            () => ({\r\n                page: page,\r\n            }),\r\n            () => {\r\n                this.setTableAction(\"changePage\");\r\n                if (this.options.onChangePage) {\r\n                    this.options.onChangePage(this.state.page);\r\n                }\r\n            },\r\n        );\r\n    };\r\n\r\n    searchTextUpdate = text => {\r\n        this.setState(\r\n            prevState => ({\r\n                searchText: text && text.length ? text : null,\r\n                displayData: this.options.serverSide\r\n                    ? prevState.displayData\r\n                    : this.getDisplayData(prevState.columns, prevState.data, prevState.filterList, text),\r\n            }),\r\n            () => {\r\n                this.setTableAction(\"search\");\r\n            },\r\n        );\r\n    };\r\n\r\n    resetFilters = () => {\r\n        this.setState(\r\n            prevState => {\r\n                const filterList = prevState.columns.map((column, index) => []);\r\n\r\n                return {\r\n                    filterList: filterList,\r\n                    displayData: this.options.serverSide\r\n                        ? prevState.displayData\r\n                        : this.getDisplayData(prevState.columns, prevState.data, filterList, prevState.searchText),\r\n                };\r\n            },\r\n            () => {\r\n                this.setTableAction(\"resetFilters\");\r\n                if (this.options.onFilterChange) {\r\n                    this.options.onFilterChange(null, this.state.filterList);\r\n                }\r\n            },\r\n        );\r\n    };\r\n\r\n    filterUpdate = (index, column, type) => {\r\n        this.setState(\r\n            prevState => {\r\n                const filterList = cloneDeep(prevState.filterList);\r\n                const filterPos = filterList[index].indexOf(column);\r\n\r\n                switch (type) {\r\n                    case \"checkbox\":\r\n                        filterPos >= 0 ? filterList[index].splice(filterPos, 1) : filterList[index].push(column);\r\n                        break;\r\n                    case \"multiselect\":\r\n                        filterList[index] = column === \"\" ? [] : column;\r\n                        break;\r\n                    default:\r\n                        filterList[index] = filterPos >= 0 || column === \"\" ? [] : [column];\r\n                }\r\n\r\n                return {\r\n                    filterList: filterList,\r\n                    displayData: this.options.serverSide\r\n                        ? prevState.displayData\r\n                        : this.getDisplayData(prevState.columns, prevState.data, filterList, prevState.searchText),\r\n                };\r\n            },\r\n            () => {\r\n                this.setTableAction(\"filterChange\");\r\n                if (this.options.onFilterChange) {\r\n                    this.options.onFilterChange(column, this.state.filterList);\r\n                }\r\n            },\r\n        );\r\n    };\r\n\r\n    selectRowDelete = () => {\r\n        const {selectedRows, data, filterList} = this.state;\r\n\r\n        const selectedMap = this.buildSelectedMap(selectedRows.data);\r\n        const cleanRows = data.filter((_, index) => !selectedMap[index]);\r\n\r\n        if (this.options.onRowsDelete) {\r\n            this.options.onRowsDelete(selectedRows);\r\n        }\r\n\r\n        this.setTableData(\r\n            {\r\n                columns: this.props.columns,\r\n                data: cleanRows,\r\n                options: {\r\n                    filterList: filterList,\r\n                },\r\n            },\r\n            TABLE_LOAD.UPDATE,\r\n            () => {\r\n                this.setTableAction(\"rowDelete\");\r\n            },\r\n        );\r\n    };\r\n\r\n    buildSelectedMap = rows => {\r\n        return rows.reduce((accum, {index}) => {\r\n            accum[index] = true;\r\n            return accum;\r\n        }, {});\r\n    };\r\n\r\n    selectRowUpdate = (type, value) => {\r\n        if (type === \"head\") {\r\n            this.setState(\r\n                prevState => {\r\n                    const {data} = prevState;\r\n                    const selectedRowsLen = prevState.selectedRows.data.length;\r\n                    const isDeselect =\r\n                        selectedRowsLen === data.length || (selectedRowsLen < data.length && selectedRowsLen > 0) ? true : false;\r\n\r\n                    let selectedRows = Array(data.length)\r\n                        .fill()\r\n                        .map((d, i) => ({index: i, dataIndex: data[i].index}));\r\n\r\n                    let newRows = [...prevState.selectedRows, ...selectedRows];\r\n                    let selectedMap = this.buildSelectedMap(newRows);\r\n\r\n                    if (isDeselect) {\r\n                        newRows = prevState.selectedRows.data.filter(({index}) => !selectedMap[index]);\r\n                        selectedMap = this.buildSelectedMap(newRows);\r\n                    }\r\n\r\n                    return {\r\n                        curSelectedRows: newRows,\r\n                        selectedRows: {\r\n                            data: newRows,\r\n                            lookup: selectedMap,\r\n                        },\r\n                    };\r\n                },\r\n                () => {\r\n                    this.setTableAction(\"rowsSelect\");\r\n                    if (this.options.onRowsSelect) {\r\n                        this.options.onRowsSelect(this.state.curSelectedRows, this.state.selectedRows.data);\r\n                    }\r\n                },\r\n            );\r\n        } else if (type === \"cell\") {\r\n            this.setState(\r\n                prevState => {\r\n                    const {index, dataIndex} = value;\r\n                    let selectedRows = [...prevState.selectedRows.data];\r\n                    let rowPos = -1;\r\n\r\n                    for (let cIndex = 0; cIndex < selectedRows.length; cIndex++) {\r\n                        if (selectedRows[cIndex].index === index) {\r\n                            rowPos = cIndex;\r\n                            break;\r\n                        }\r\n                    }\r\n\r\n                    if (rowPos >= 0) {\r\n                        selectedRows.splice(rowPos, 1);\r\n                    } else {\r\n                        selectedRows.push(value);\r\n                    }\r\n\r\n                    return {\r\n                        selectedRows: {\r\n                            lookup: this.buildSelectedMap(selectedRows),\r\n                            data: selectedRows,\r\n                        },\r\n                    };\r\n                },\r\n                () => {\r\n                    this.setTableAction(\"rowsSelect\");\r\n                    if (this.options.onRowsSelect) {\r\n                        this.options.onRowsSelect([value], this.state.selectedRows.data);\r\n                    }\r\n                },\r\n            );\r\n        }\r\n    };\r\n\r\n    sortCompare(order) {\r\n        return (a, b) => {\r\n            if (a.data === null) a.data = \"\";\r\n            if (b.data === null) b.data = \"\";\r\n\r\n            if (typeof a.data.localeCompare === \"function\") {\r\n                return a.data.localeCompare(b.data) * (order === \"asc\" ? -1 : 1);\r\n            } else {\r\n                return (a.data - b.data) * (order === \"asc\" ? -1 : 1);\r\n            }\r\n        };\r\n    }\r\n\r\n    sortTable(data, col, order, displayData) {\r\n        let sortedData = displayData.map((row, sIndex) => ({\r\n            data: row.data[col],\r\n            position: sIndex,\r\n            rowSelected: this.state.selectedRows.lookup[sIndex] ? true : false,\r\n        }));\r\n\r\n        sortedData.sort(this.sortCompare(order));\r\n\r\n        let tableData = [];\r\n        let selectedRows = [];\r\n\r\n        for (let i = 0; i < sortedData.length; i++) {\r\n            const row = sortedData[i];\r\n            data[row.position].dataIndex = i;\r\n            tableData.push(data[row.position]);\r\n            if (row.rowSelected) {\r\n                selectedRows.push({index: i, dataIndex: data[row.position].index});\r\n            }\r\n        }\r\n\r\n        return {\r\n            data: tableData,\r\n            selectedRows: {\r\n                lookup: this.buildSelectedMap(selectedRows),\r\n                data: selectedRows,\r\n            },\r\n        };\r\n    }\r\n\r\n    renderTableToolbar() {\r\n        const {title} = this.props;\r\n        const {columns, filterData, filterList, selectedRows} = this.state;\r\n\r\n        return selectedRows.data.length ? (\r\n            <MaterialDatatableToolbarSelect\r\n                options={this.options}\r\n                selectedRows={selectedRows}\r\n                onRowsDelete={this.selectRowDelete}\r\n            />\r\n        ) : (\r\n            <MaterialDatatableToolbar\r\n                columns={columns}\r\n                data={this.state.displayData}\r\n                filterData={filterData}\r\n                filterList={filterList}\r\n                filterUpdate={this.filterUpdate}\r\n                options={this.options}\r\n                resetFilters={this.resetFilters}\r\n                searchTextUpdate={this.searchTextUpdate}\r\n                tableRef={() => this.tableContent}\r\n                title={title}\r\n                toggleViewColumn={this.toggleViewColumn}\r\n            />\r\n        );\r\n    }\r\n\r\n    renderTable() {\r\n        const {classes, title} = this.props;\r\n        const {activeColumn, displayData, columns, page, filterList, rowsPerPage, selectedRows, searchText} = this.state;\r\n\r\n        const rowCount = this.options.count || displayData.length;\r\n\r\n        return (\r\n            <div\r\n                ref={el => (this.tableContent = el)}\r\n                style={{position: \"relative\"}}\r\n                className={this.options.responsive === \"scroll\" ? classes.responsiveScroll : null}>\r\n                {this.options.resizableColumns && (\r\n                    <MaterialDatatableResize key={rowCount} setResizeable={fn => (this.setHeadResizeable = fn)}/>\r\n                )}\r\n                <Table ref={el => (this.tableRef = el)} tabIndex={\"0\"} role={\"grid\"}>\r\n                    <caption className={classes.caption}>{title}</caption>\r\n                    <MaterialDatatableHead\r\n                        activeColumn={activeColumn}\r\n                        data={this.state.displayData}\r\n                        count={rowCount}\r\n                        columns={columns}\r\n                        page={page}\r\n                        rowsPerPage={rowsPerPage}\r\n                        handleHeadUpdateRef={fn => (this.updateToolbarSelect = fn)}\r\n                        selectedRows={selectedRows}\r\n                        selectRowUpdate={this.selectRowUpdate}\r\n                        toggleSort={this.toggleSortColumn}\r\n                        setCellRef={this.setHeadCellRef}\r\n                        options={this.options}\r\n                    />\r\n                    <MaterialDatatableBody\r\n                        data={this.state.displayData}\r\n                        count={rowCount}\r\n                        columns={columns}\r\n                        page={page}\r\n                        rowsPerPage={rowsPerPage}\r\n                        selectedRows={selectedRows}\r\n                        selectRowUpdate={this.selectRowUpdate}\r\n                        options={this.options}\r\n                        searchText={searchText}\r\n                        filterList={filterList}\r\n                    />\r\n                </Table>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderFilterList() {\r\n        const {filterList} = this.state;\r\n\r\n        return (\r\n            <MaterialDatatableFilterList options={this.options} filterList={filterList}\r\n                                         filterUpdate={this.filterUpdate}/>\r\n        );\r\n    }\r\n\r\n    renderPagination() {\r\n        const {displayData, page, rowsPerPage} = this.state;\r\n\r\n        const rowCount = this.options.count || displayData.length;\r\n\r\n        return (\r\n            <Table>\r\n                {this.options.customFooter\r\n                    ? this.options.customFooter(rowCount, page, rowsPerPage, this.changeRowsPerPage, this.changePage)\r\n                    : this.options.pagination && (\r\n                    <MaterialDatatablePagination\r\n                        count={rowCount}\r\n                        page={page}\r\n                        rowsPerPage={rowsPerPage}\r\n                        changeRowsPerPage={this.changeRowsPerPage}\r\n                        changePage={this.changePage}\r\n                        component={\"div\"}\r\n                        options={this.options}\r\n                    />\r\n                )}\r\n            </Table>\r\n        );\r\n    }\r\n\r\n    renderLiveAnnounce() {\r\n        const {classes} = this.props;\r\n        const {announceText} = this.state;\r\n\r\n        return (\r\n            <div className={classes.liveAnnounce} aria-live={\"polite\"} ref={el => (this.announceRef = el)}>\r\n                {announceText}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        const {classes} = this.props;\r\n\r\n        return this.options.usePaperPlaceholder ? (\r\n            <Paper elevation={4} className={classes.paper}>\r\n                {this.renderTableToolbar()}\r\n                {this.renderFilterList()}\r\n                {this.renderTable()}\r\n                {this.renderPagination()}\r\n                {this.renderLiveAnnounce()}\r\n            </Paper>\r\n        ) : (\r\n            <React.Fragment>\r\n                {this.renderTableToolbar()}\r\n                {this.renderFilterList()}\r\n                {this.renderTable()}\r\n                {this.renderPagination()}\r\n                {this.renderLiveAnnounce()}\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(defaultTableStyles, {name: \"MaterialDatatable\"})(MaterialDatatable);\r\n"],"names":["MaterialPopoverContent","this","props","children","React","Component","MaterialPopoverTarget","Children","map","child","index","cloneElement","_this2","targetRef","onClick","MaterialPopover","state","handleClick","anchorEl","findDOMNode","_this","setState","open","handleRequestClose","cb","handleOnExit","refExit","refClose","prevProps","prevState","popoverActions","updatePosition","popoverRender","className","placement","providedProps","type","popoverContent","actions","popoverEl","push","targetContent","el","defaultFilterStyles","MaterialDatatableFilter","handleCheckboxChange","column","onFilterUpdate","handleDropdownChange","event","value","target","handleMultiselectChange","columns","classes","filterData","filterList","filter","checkboxList","key","variant","checkboxListTitle","name","filterColumn","filterIndex","FormControlLabel","checkboxFormControl","checkboxFormControlLabel","Checkbox","checkboxIcon","bind","indexOf","checkbox","checked","toString","textLabels","options","selectRoot","selectFormControl","htmlFor","all","_this3","Input","id","selected","join","_this4","ListItemText","primary","onFilterReset","root","header","reset","classNames","title","noMargin","filterType","resetLink","tabIndex","aria-label","filtersSelected","renderCheckbox","renderMultiselect","renderSelect","withStyles","defaultViewColStyles","MaterialDatatableViewCol","handleColChange","onColumnUpdate","viewColumns","component","titleAria","formGroup","display","formControl","label","checkboxRoot","defaultSearchStyles","MaterialDatatableSearch","handleTextChange","onSearchChange","onSearch","onKeyDown","keyCode","onHide","addEventListener","removeEventListener","appear","in","timeout","main","ref","rootRef","SearchIcon","searchIcon","TextField","searchText","toolbar","search","searchField","clearIcon","ClearIcon","styles","theme","style","StyledComponent","WrappedComponent","passThroughProps","styled","customProps","FinalComponent","defaultStyles","merge","otherProps","defaultToolbarStyles","responsive","responsiveToolbarStyles","MaterialDatatableToolbar","handleCSVDownload","data","csv","reduce","accumulator","download","downloadOptions","separator","slice","row","field","trim","blob","Blob","dataURI","URL","window","webkitURL","downloadURI","createObjectURL","link","document","createElement","setAttribute","filename","body","appendChild","click","removeChild","setActiveIcon","iconName","getActiveIcon","iconActive","icon","hideSearch","onSearchClose","searchTextUpdate","searchButton","focus","filterUpdate","resetFilters","toggleViewColumn","tableRef","downloadCsv","print","filterTable","showSearch","role","left","titleRoot","aria-hidden","titleText","DownloadIcon","ReactToPrint","PrintIcon","container","ViewColumnIcon","FilterIcon","customToolbar","defaultToolbarSelectStyles","MaterialDatatableToolbarSelect","onRowsDelete","selectedRows","length","text","customToolbarSelect","delete","iconButton","deleteAria","DeleteIcon","deleteIcon","defaultFilterListStyles","MaterialDatatableFilterList","item","colIndex","Chip","chip","defaultBodyCellStyles","MaterialDatatableBodyCell","rowIndex","dataIndex","onCellClick","columnHeader","cellHide","cellStacked","responsiveStacked","defaultBodyRowStyles","MaterialDatatableBodyRow","rowSelected","rowHover","defaultSelectCellStyles","MaterialDatatableSelectCell","padding","disabled","defaultBodyStyles","MaterialDatatableBody","handleRowSelect","selectRowUpdate","page","rowsPerPage","count","serverSide","rows","totalPages","Math","floor","fromIndex","toIndex","min","Error","undefined","lookup","tableRows","buildRows","selectableRows","isRowSelected","onRowClick","getRowIndex","emptyTitle","noMatch","defaultResizeStyles","MaterialDatatableResize","handleReize","innerWidth","windowWidth","setDividers","setCellRefs","cellsRef","getBoundingClientRect","tableWidth","width","tableHeight","height","resizeCoords","Object","entries","forEach","elRect","elStyle","getComputedStyle","offsetWidth","parseInt","paddingLeft","updateWidths","lastPosition","newWidth","Number","toFixed","percent","onResizeStart","e","isResize","startPosition","clientX","onResizeMove","leftPos","curCoord","newResizeCoords","onResizeEnd","setResizeable","val","resizer","defaultHeadRowStyles","MaterialDatatableHeadRow","defaultHeadCellStyles","MaterialDatatableHeadCell","handleSortClick","toggleSort","sortDirection","sort","headerNoWrap","sortActive","sortLabelProps","direction","whiteSpace","toolTip","popper","mypopper","tooltip","toolButton","sortAction","TableSortLabel","defaultHeadStyles","MaterialDatatableHead","handleToggleColumn","handleHeadUpdateRef","handleUpdateCheck","setCellRef","numSelected","isDeterminate","isChecked","customHeadRender","defaultPaginationStyles","MaterialDatatablePagination","handleRowChange","changeRowsPerPage","handlePageChange","_","changePage","pagination","TablePagination","caption","from","to","displayRows","previous","next","rowsPerPageOptions","defaultTableStyles","TABLE_LOAD","MaterialDatatable","setTableAction","onTableChange","action","setHeadCellRef","headCellRefs","updateDataCol","changedData","cloneDeep","tableMeta","getTableMeta","funcResult","customBodyRender","filterValue","isValidElement","prevFilterIndex","splice","sortFilterList","collator","Intl","Collator","numeric","sensitivity","compare","getDisplayData","rowData","columnData","tableData","curState","displayData","onColumnViewChange","toggleSortColumn","order","pos","orderLabel","getSortDirection","newState","sortedData","sortTable","onColumnSortChange","onChangeRowsPerPage","onChangePage","onFilterChange","filterPos","selectRowDelete","selectedMap","buildSelectedMap","cleanRows","setTableData","UPDATE","accum","selectedRowsLen","isDeselect","Array","fill","d","i","newRows","onRowsSelect","curSelectedRows","rowPos","cIndex","setHeadResizeable","initializeTable","nextProps","getDefaultOptions","setTableOptions","INITIAL","defaultOptions","optState","acc","cur","validateOptions","status","callback","columnOptions","selectedRowsData","rowsSelected","isFiltered","isSearchFound","displayRow","columnDisplay","columnValue","columnVal","searchNeedle","searchStack","caseSensitive","toLowerCase","records","computeDisplayRow","a","b","localeCompare","col","sIndex","sortCompare","position","_this5","tableContent","activeColumn","rowCount","_this6","responsiveScroll","resizableColumns","fn","updateToolbarSelect","customFooter","announceText","liveAnnounce","aria-live","_this7","announceRef","usePaperPlaceholder","elevation","paper","renderTableToolbar","renderFilterList","renderTable","renderPagination","renderLiveAnnounce","Fragment","defaultProps"],"mappings":"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"}